<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>for beauty</title>
      <link href="/2022/01/07/for%20beauty/"/>
      <url>/2022/01/07/for%20beauty/</url>
      
        <content type="html"><![CDATA[<p>有一名女子特别吸引了高尔顿的注意。作为一名钻研科学的人，他报告说，“我特别想获得她身材的准确测量值。”尽管不会说霍屯督语，也不知该怎样开展此项“研究”，但高尔顿依然达到了自己的目标，他写道：突然间，我的目光落在了我的六分仪上。我灵机一动，从各个方向观测了她的身材，记下数值……然后，我大胆地拉出我的卷尺，测量了我和她站立处之间的距离，从而获得了基线和角度。根据这些，我运用三角函数和对数函数算出了结果。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 有趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字段无多态</title>
      <link href="/2021/12/27/%E5%AD%97%E6%AE%B5%E6%97%A0%E5%A4%9A%E6%80%81/"/>
      <url>/2021/12/27/%E5%AD%97%E6%AE%B5%E6%97%A0%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>节选《深入理解java虚拟机》</p><p>一个有意思的例子：</p><pre><code class="java">package org.fenixsoft.polymorphic;/*** 字段不参与多态* @author zzm*/public class FieldHasNoPolymorphic &#123;    static class Father &#123;        public int money = 1;        public Father() &#123;            money = 2;            showMeTheMoney();        &#125;        public void showMeTheMoney() &#123;            System.out.println(&quot;I am Father, i have $&quot; + money);        &#125;    &#125;    static class Son extends Father &#123;        public int money = 3;        public Son() &#123;            money = 4;            showMeTheMoney();        &#125;        public void showMeTheMoney() &#123;            System.out.println(&quot;I am Son, i have $&quot; + money);        &#125;    &#125;    public static void main(String[] args) &#123;        Father gay = new Son();        System.out.println(&quot;This gay has $&quot; + gay.money);    &#125;&#125;</code></pre><p>输出：</p><pre><code class="java">I am Son, i have $0I am Son, i have $4This gay has $2</code></pre><hr><p>解释：</p><p>输出两句都是“I am Son”，这是因为Son类在创建的时候，首先隐式调用了Father的构造函数，而 Father构造函数中对showMeTheMoney()的调用是一次虚方法调用，实际执行的版本是 Son::showMeTheMoney()方法，所以输出的是“I am Son”，这点经过前面的分析相信读者是没有疑问的 了。而这时候虽然父类的money字段已经被初始化成2了，但Son::showMeTheMoney()方法中访问的却 是子类的money字段，这时候结果自然还是0，因为它要到子类的构造函数执行时才会被初始化。 main()的最后一句通过静态类型访问到了父类中的money，输出了2。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>福格行为模型阅读1</title>
      <link href="/2021/12/16/%E7%A6%8F%E6%A0%BC%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%9E%8B%E9%98%85%E8%AF%BB1/"/>
      <url>/2021/12/16/%E7%A6%8F%E6%A0%BC%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%9E%8B%E9%98%85%E8%AF%BB1/</url>
      
        <content type="html"><![CDATA[<h3 id="行为模型-B-behavior-M-motivation-A-ability-P-prompt"><a href="#行为模型-B-behavior-M-motivation-A-ability-P-prompt" class="headerlink" title="行为模型 B(behavior) = M(motivation) A(ability) P(prompt)"></a>行为模型 B(behavior) = M(motivation) A(ability) P(prompt)</h3><blockquote><p>行为的发生需要动机、能力和提示3大要素同时发挥作用。</p></blockquote><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ul><li>动机越强，行为就越可能达到（能力是动态的，比如母亲对孩子的保护引发的各种奇迹例子）。</li><li>行为越容易，就越可能养成习惯。</li><li>动机和能力要像队友一样密切配合。（动机即欲望，不满足能力空意淫而已）</li><li>没有提示，任何行为都不会发生。</li></ul><h4 id="例子分析-睡前玩手机"><a href="#例子分析-睡前玩手机" class="headerlink" title="例子分析 - 睡前玩手机"></a>例子分析 - 睡前玩手机</h4><p>对问题进行分析：</p><ul><li>动机：娱乐</li><li>能力：触手可及</li></ul><p>总结：既满足动机同时睡前完手机是非常轻易的，同时越是容易的行为越是容易养成习惯。</p><hr><h4 id="问题思考与解决："><a href="#问题思考与解决：" class="headerlink" title="问题思考与解决："></a>问题思考与解决：</h4><ol><li>检查有没有行为<strong>提示</strong>。</li><li>检查有没有行为<strong>能力</strong>。</li><li>检查有没有行为<strong>动机</strong>。</li></ol><blockquote><p>一般情况下，动机是最后需要进行更改的，比如娱乐是人类的天性，而大多数不良行为都与此相关。</p></blockquote><p>从这件事本身出发，可以得出以下方案：</p><ul><li><p>提示：</p><ol><li><p>将手机远离，闹钟替换为老式闹钟，减少睡前提示。（这本身实际上也增强了使用的难度降低了能力）</p></li><li><p>将手机本身进行更换为纸质书本阅读，避免外来信息流不断刺激干扰。</p></li><li><p>设定基准线，到时间进行提示睡觉.（睡眠本身也是种习惯，可以提示促进睡眠行为的发生）</p></li></ol></li><li><p>能力：</p><ol><li><p>删除手机软件。（实际上从提示出发便可以得出方案，删除软件不太可行）</p></li><li><p>找人进行监督。</p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词分类和变形</title>
      <link href="/2021/12/12/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A01/"/>
      <url>/2021/12/12/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h3 id="动词三分类"><a href="#动词三分类" class="headerlink" title="动词三分类"></a>动词三分类</h3><h4 id="一类动词（五段动词）"><a href="#一类动词（五段动词）" class="headerlink" title="一类动词（五段动词）"></a>一类动词（五段动词）</h4><ol><li><p>结尾是う段非る的动词，肯定是5段动词。</p><ul><li>書く</li></ul></li><li><p>あ段+る、う段+る、お段+る</p><ul><li>こまる</li><li>怒る　おこる</li><li>やる</li></ul></li><li><p>特例：</p><ul><li>きる</li><li>帰る　かえる</li><li>走る　はしる</li></ul></li></ol><h4 id="二类动词（上一段动词、下一段动词，没必要区分）"><a href="#二类动词（上一段动词、下一段动词，没必要区分）" class="headerlink" title="二类动词（上一段动词、下一段动词，没必要区分）"></a>二类动词（上一段动词、下一段动词，没必要区分）</h4><ul><li>い＋る</li><li>え＋る</li></ul><blockquote><p>一类动词2中的对る结尾的补集</p></blockquote><h4 id="三类动词（不规则动词、カ变、サ变）"><a href="#三类动词（不规则动词、カ变、サ变）" class="headerlink" title="三类动词（不规则动词、カ变、サ变）"></a>三类动词（不规则动词、カ变、サ变）</h4><p>くる　か变</p><p>する　サ变</p><p>名词+する（名词变成动词）</p><h3 id="动词变形"><a href="#动词变形" class="headerlink" title="动词变形"></a>动词变形</h3><h4 id="5段动词-う段-―-い段-＋-ます"><a href="#5段动词-う段-―-い段-＋-ます" class="headerlink" title="5段动词  う段　―　い段　＋　ます"></a>5段动词  う段　―　い段　＋　ます</h4><ul><li><p>書く　かく　―　書きます　かきます</p></li><li><p>吸う　すう　―　吸います</p></li><li><p>切る　きる　ー　切ります</p></li></ul><h4 id="上一段动词、下一段动词"><a href="#上一段动词、下一段动词" class="headerlink" title="上一段动词、下一段动词"></a>上一段动词、下一段动词</h4><p>る　―　ます</p><ul><li>教える　おしえる　ー　教えます</li><li>開ける　あける　ー　開けます</li><li>調べる　しらべる　ー　調べます</li></ul><h4 id="カ变、サ变"><a href="#カ变、サ变" class="headerlink" title="カ变、サ变"></a>カ变、サ变</h4><p>来る　くる　ー　来ます　きます</p><p>する　ー　します</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于短暂的幸福</title>
      <link href="/2021/12/12/%E5%85%B3%E4%BA%8E%E7%9F%AD%E6%9A%82%E7%9A%84%E5%B9%B8%E7%A6%8F/"/>
      <url>/2021/12/12/%E5%85%B3%E4%BA%8E%E7%9F%AD%E6%9A%82%E7%9A%84%E5%B9%B8%E7%A6%8F/</url>
      
        <content type="html"><![CDATA[<hr><p>‍这种手到擒来的幸福真是让人上瘾，人在健身节食减肥后往往容易反弹，这便是代谢匹配的问题，而幸福与多巴胺更是如此，仿佛不可形变的上瘾，假以时日，就这样凋零估计也很容易，饥饿感与饱腹感，仔细思考倒也不错，刚性的落差也挺好，抽刀断水水更流，大江东去，三大阶梯，三峡之能量来源，化学能化学反应，声音与波纹，嗯，确实，仔细思考确实挺好，是玩物丧志不够尖锐，把史莱姆与水滴当做目标吧，从张量和涨落开始。</p><hr><blockquote><p>cc 2021.12.12</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要有hasArray()？</title>
      <link href="/2021/12/07/hasArray/"/>
      <url>/2021/12/07/hasArray/</url>
      
        <content type="html"><![CDATA[<p>直接贴StackOverflow  </p><p><a href="https://stackoverflow.com/questions/55442531/why-do-we-ever-need-hasarray-method-in-charbuffer">https://stackoverflow.com/questions/55442531/why-do-we-ever-need-hasarray-method-in-charbuffer</a></p><hr><p>正文：</p><p>The condition for <code>hasArray</code> is  </p><pre><code class="java">(hb != null) &amp;&amp; !isReadOnly</code></pre><hr><p><code>isReadOnly</code> changes if you use <code>asReadOnlyBuffer</code></p><pre><code class="java">CharBuffer.allocate(20).asReadOnlyBuffer();</code></pre><p>for example.<br>So yes, we need it.</p><hr><p>Take this line</p><pre><code class="java">final CharBuffer cb = instance.getCharBuffer(...);</code></pre><p>Is it read-only or not? Does it hold a valid <code>char[]</code> array? We don’t really know. If we do</p><pre><code class="java">cb.array();</code></pre><p>and it is a read-only Buffer, we get a <code>ReadOnlyBufferException</code>.<br>If it isn’t backed by a <code>char[]</code> array we get a <code>UnsupportedOperationException</code>.</p><p>So what we <em>might</em> do is</p><pre><code class="java">if (cb.hasArray()) &#123;   final char[] arr = cb.array();&#125;</code></pre><p>Now we are <code>Exception</code>-safe.<br>Also, you can be sure Oracle/OpenJDK/whateverJDK engineers know what they’re doing ;)</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海底-2</title>
      <link href="/2021/11/27/%E6%B5%B7%E5%BA%952/"/>
      <url>/2021/11/27/%E6%B5%B7%E5%BA%952/</url>
      
        <content type="html"><![CDATA[<p>​        不过回到现实的我仍然对于现状束手无策，即使的对于自己为什么会来到这里的记忆片段也是十分模糊，就像我睡着了一样。嗯？睡着了？难道现在的我身处梦境之中吗，于是我重新站立起来，尝试通过想象力重构眼前的世界。</p><p>​        然而，就算我拼了全力集中注意力去想象也对眼前这圆台毫无影响，底下仿佛天堑一般横跨在四周，无法对其造成任何的干涉。后来我换成用手使劲捏我的大腿，用牙齿咬舌头，企图想用疼痛唤醒沉睡的自己，但仍然毫无作用。为什么会这样，我不由得深思，这既然不是梦，那为什么我最后的记忆是睡觉。</p><p>​        就在这时，远处的黑暗中突然出现了一丝亮光，并且随着时间的推移这个亮光正在不断地放大，我忽然意识到这是个移动并向外靠近的光源，很有可能是属于一个生物体。这个突如其来的惊喜同时也照亮了我的心，我开始朝那边进行呼唤。果然，那个光源仿佛听到了我声音般加速赶来。</p><p>​        随着对方不断靠近，我发现对方居然是一个人类，并且服装等都符合现代装扮，而所谓的光源也不过是一个当代的手电灯。当我观察到对方时，他也发现了我。“你是？”这句话令我狂喜，我居然能听懂对方的语言，能进行交流简直太棒不过了，一扫我之前阴郁的心情。</p><p>​        “啊你好你好，谢天谢地，我的名字是cc，非常高兴能够见到你呀，这个地方真是深不见底，我已经是没有任何办法了，还好你赶过来了”</p><p>​        “真没想到还能碰到人，而且还能听懂我的话”在听到我的话后，他小声嘀咕了一下。</p><p>​        “啊，抱歉？”</p><p>​        “没事没事，你刚才说是什么没有任何办法了？”</p><p>​        “啊对，我是说，我被困在这个高台上了，没有办法离开”</p><p>​        “嗯？没有办法离开？”</p><p>​        “对呀，就像你现在所看到的样子，这怎么离开，四周都是悬崖”</p><p>​        在听到我的回答后，对方仿佛听到了什么惊人话般。“你。。。。。。。”</p><p>​        也就在这时，一直沉浸在来人的惊喜的我终于反应了过来，拿着光源的他好像是飘在了空中一般。“等下，为什么你是飘在空中的呀”</p><p>​        “为什么，哈哈”这时对方又仿佛听到了我讲的什么不得了的笑话一样，他突然大笑了起来。“你会问鱼为什么他能飘在海中吗？”</p><p>​        嗯？鱼，飘在海中？啊对呀，这时的我忽然才想起来，我现在不正是在海底吗？既然在海底，为什么我还一直担心周围的深渊与这高台呢。现在我才意识到，恰恰是这我赖以生存的高台，一直如枷锁般困着我。</p>]]></content>
      
      
      <categories>
          
          <category> 填充时间 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> story </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective java阅读1</title>
      <link href="/2021/11/25/effective%20java1/"/>
      <url>/2021/11/25/effective%20java1/</url>
      
        <content type="html"><![CDATA[<h3 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h3><ol><li><p>避免创建不必要的对象。</p><p>比如使用正则表达式matche字符串时，可以将其显式编译为一个pattern实例（不可变），当需要比较时，直接重用该实例。</p></li><li><p>避免使用终结方法和清除方法。</p><ul><li>永远也不要依赖终结方法或者清除方法来更新重要的持久状态。因为根本就不保证会被执行。</li><li>不要被Sysme.gc和System.runFinalization这两个方法迷惑。理由同上。</li><li>使用终结方法和清除方法有一个非常严重的性能损失。因为它会阻止有效的垃圾回收。</li><li>终结方法有一个严重的安全问题。（终结方法攻击）</li><li>如果确实有资源需要终止，可以使其实现AutoCloseable。一般的终结方法只是充当close的安全网。</li></ul></li><li><p>try-with-resources优先于try-finally。（在有嵌套try结构时有效避免问题，资源需要实现AutoCloseable接口）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>effective java阅读2</title>
      <link href="/2021/11/25/effective%20java2/"/>
      <url>/2021/11/25/effective%20java2/</url>
      
        <content type="html"><![CDATA[<h3 id="第三章-对于所有对象都通用的方法"><a href="#第三章-对于所有对象都通用的方法" class="headerlink" title="第三章 对于所有对象都通用的方法"></a>第三章 对于所有对象都通用的方法</h3><ol><li><p>关于equals</p><ul><li><p>覆盖equals时必须要覆盖hashcode：map中先是由hashcode散列确定位置再由equals比较，假如两个一致却没覆盖hashcode便会导致map中存有重复的目标对象。</p></li><li><p>不要将equals声明中的object对象替换为其他类型</p><pre><code class="java">// bad example，这并没有覆盖方法，而是重载public boolean equals(MyClass o)&#123;&#125;// good 以Integer的equals方法为例public boolean equals(Object obj) &#123;        if (obj instanceof Integer) &#123;            return value == ((Integer)obj).intValue();        &#125;        return false;    &#125;</code></pre><blockquote><p>有时为了避免这种覆盖写成重载的情况出现，可以使用@Override进行注解</p></blockquote></li></ul></li><li><p>始终要覆盖toString() ： 提供好的toString实现可以使类使用起来更加舒适便于调试。</p><ul><li>无论是否制定格式，都应该在文档中明确表明意图。</li><li>无论是否制定格式，都为toString返回值中包含的所有信息提供一种可以通过编程访问的途径。</li></ul></li><li><p>谨慎覆盖clone()</p><ul><li>不可变的类永远都不应该提供clone方法。</li><li>实际上，clone方法就是另一个构造器；必须确保它不会伤害到原有对象，并确保正确地创建创建被克隆对象中的约束条件。</li><li>一般clone方法采用先super.clone，再逐域对象迭代、递归复制。</li><li>对象拷贝的更好方法是提供一个拷贝构造器。（数组最好利用clone复制）</li></ul></li><li><p>考虑实现Comparable接口</p><ul><li><p>一旦实现了comparable接口，它就可以跟许多泛型算法以及依赖于该接口的集合实现进行协作。</p></li><li><p>当比较依赖于两个值之间的区别时，不要使用以下代码。</p><pre><code class="java">// bad example 会造成整数溢出static Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;()&#123;    public int compare(Object o1, Object o2) &#123;        return o1.hashCode() - o2.hashCode();    &#125;&#125;// good examplestatic Comparator&lt;Object&gt; hashCodeOrder = new Comparator&lt;&gt;()&#123;    public int compare(Object o1, Object o2) &#123;        return Integer.compare(o1.hashCode(), o2.hashCode());    &#125;&#125;// 使用比较器构造方法static Comparator&lt;Object&gt; hashCodeOrder = Comparator.comparingInt(o -&gt; o.hashCode());</code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富爸爸穷爸爸阅读笔记1</title>
      <link href="/2021/11/24/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8/"/>
      <url>/2021/11/24/%E5%AF%8C%E7%88%B8%E7%88%B8%E7%A9%B7%E7%88%B8%E7%88%B8/</url>
      
        <content type="html"><![CDATA[<ul><li>富人获得资产，而穷人和中产阶级获得负债，只不过他们以为那些负债就是资产。</li></ul><blockquote><p>这个在大多数情况下个人感觉成立，不过就像最主要的负债导致的-&gt;房奴有时却又不如此，这类型的负债获得的房产在过去是在不断增值的，还有其他隐性收益。  </p><p>那么最后造成了房奴的原因，个人认为很明显和《稀缺》中所提到的个人时间的缺失从而无法提升自己的原因一致，那就是负债达到了某种上限，占到了个人收益的极大一部分而没有余钱进行其他有益的投资，让个人的财务007，最终陷入僵局。</p></blockquote><ul><li>资产是能把钱放进我口袋里的东西，不管我工作与否；负债是把钱从我口袋里取走的东西。</li></ul><blockquote><p>口袋不止单纯的金钱存款，头脑也是。</p></blockquote><ul><li>现金流说明了问题，即一个人怎样处理他的钱。</li></ul><blockquote><p>相配的品味，哈哈，收入增加支出增加，资产没长，负债却十分配合收入，不错不错。</p></blockquote><ul><li>财富就是支撑一个人生存多长时间的能力，或者说，如果我今天停止工作，我还能活多久？</li></ul><blockquote><p>忽然有了一个想法，财富过多会不会压制社会发展，但那些富人有钱了反而更加着迷赚钱，想必是一些新的东西-马斯洛理论的个人实现？还是说财富增长到一定程度会被资本裹挟？以后势必要一探究竟。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动习惯</title>
      <link href="/2021/11/20/%E5%85%B3%E4%BA%8E%E4%B9%A0%E6%83%AF/"/>
      <url>/2021/11/20/%E5%85%B3%E4%BA%8E%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="启动习惯"><a href="#启动习惯" class="headerlink" title="启动习惯"></a>启动习惯</h2><ol><li>万事开头难，有时候仅仅只要成功一次，会发现成功接踵而来。习惯的开端正是如此，此前为了养成早起的习惯，尝试了很多次早起，定了很多次的闹钟，结果发现根本没用，直到某天偶然且突然地早起了，结果就从这天开始，天天早起。</li><li>意志力是个消耗品，专注力也是个消耗品，把难以专注缺乏反馈但却useful的事情放在一天最开始完成，将那些能够得到持续性反馈的事情可以适当放在困倦的时候，但当进入心流状态时，番茄时钟法反而会破坏这种状态的延续性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven命令</title>
      <link href="/2021/11/19/maven%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/19/maven%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>1. clean：</strong>清理，在进行真正构建之前进行一些清理的工作，移除所有上一次构建生生的文件。执行该命令会删除项目路径下的target文件。但是不会删除本地的maven仓库已经生成的jar文件。</p><p><strong>2. validate：</strong>验证，验证工程是否正确，所需的信息是否完整。</p><p><strong>3. compile：</strong>编译源码，编译生成class文件，编译命令，只编译选定的目标，不管之前是否已经编译过，会在项目路径下生成一个target目录，在该目录中包含一个class目录，里面全是生成的class文件及字节码文件。</p><p><strong>4. package：</strong>打包，将工程文件打包为指定的格式，例如jar、war等。这个命令会在项目路径下生成一个target目录，并且拥有compile命令的功能进行编译，同会在target目录下生成项目的jar/war文件。如果a项目依赖于b项目，打包b项目时，只会打包到b项目下的target目录下，编译a项目时就会报错，因为找不到所依赖的b项目，说明a项目在本地仓库是没有找到它所依赖的b项目，这就需要install命令了。</p><p><strong>5. verify：</strong>核实，检查package是否有效，符合标准。</p><p><strong>6. install：</strong>安装至本地仓库，将包安装到本地仓库，让其他项目依赖。该命令包含了package命令的功能，不但会在项目路径下生成class文件和jar包，同时会在本地maven仓库生成jar文件，以供其他项目使用（如果没有设置过maven项目，一般在用户./m2目录下。如果a项目依赖于b项目，那么install b项目，会在本地仓库同时生成pom文件和jar文件，解决了package出错的问题。）</p><p><strong>7. build：</strong>功能类似compile，只是只能对整个项目进行编译。</p><p><strong>8. site：</strong>站点，生成项目的站点文档。</p><p><strong>9. deploy：</strong>``复制到远程仓库。</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海底-1</title>
      <link href="/2021/11/18/%E5%B0%8F%E8%AF%B4/"/>
      <url>/2021/11/18/%E5%B0%8F%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p>​        现在的我正躺在一个用石头制作而成的平台上，周遭的一切十分安静，天空泛起的波纹让原本的圆月有了暗色的条纹，我忽然意识到我正在海底，周围的海水包裹着我并不会使我难受，相反，这让我感到非常舒适，仿佛躺在过去夜晚中蜷缩着的被子中。</p><p>​        我用手支撑着身体坐了起来，突然间，我感受到了一种巨大的恐惧。因为，前方一无所有，准确地来说，我现在所处的石头平台就像一座高塔矗立在这深渊之中，而周围是一眼望不到尽头的黑暗。意识到现状的我不由得放低了重心，小心地趴在这个平台上。</p><p>​        过了大概有半个小时吧，接受现状的我还是决定乘着月色看看这深渊地下会有些什么。于是，我渐渐地爬到了高耸平台的边缘，努力地向下看去。很可惜，下方的世界一如包裹着我的黑暗深不见底。</p><p>​        等待等待，可能有几小时，可能有一天，我呆呆地坐在这里，但其实除了等待我也不知道还能做些什么，仿佛我被抛弃在了生命的孤岛中，能前进的永远只有脚下这小小的土地，我焦急我狂躁我悲伤但都无济于事，我所能做的只有等待，仿佛时间能告诉我命运，仿佛我脚下的孤岛似那漂流瓶能将我带到温暖的岸边，仿佛现在即将远逝而未来即将到来。但实际上我知道，结果早已命中注定，因为天上的月亮仍一直停留，仿佛它已经成为了永恒。</p><p>​        面对着这泛起波澜的月色，我不禁地自问，它是永恒，那在这小小天地的我又是什么呢，我竟能与它隔空相对，认知并定义？</p><p>​        但我不知道，因为我不知道的事情实在是太多了。在我的记忆中，在我过去生活过的时代中，即使是对已知数学领域全知的人也早已消失，世界发展得过于迅速，无数地人在拓展属于他那个细分领域的前沿，每个人都想保持着自身的不可替代性拼命地纵向横向发展，而我也不过是那样时代小小可替代的一环，可能是因为需求也被急速拓展了吧，让我这样的人也能在如此的社会中混得一职发展下去。唉，现在回想起来，像工作这样毫无意义却又因占据自身生命的一环而充满意义的事情实在是太多了，人总是在矛盾中生存在矛盾转换中发展。</p><p>​        但即使过去再过不堪，最终也还是要回归到这小小的石塔顶端，我摇摇头然后用手拍了拍自己脸。</p><p>​        </p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> story </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first_hexo_log</title>
      <link href="/2021/11/17/first-hexo-log/"/>
      <url>/2021/11/17/first-hexo-log/</url>
      
        <content type="html"><![CDATA[<p>This is my first hexo-log.</p>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
